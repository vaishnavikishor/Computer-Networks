//Receiver
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8888
#define BUFFER_SIZE 1024

int main() {
    int sockfd;
    struct sockaddr_in server_addr, client_addr;
    char buffer[BUFFER_SIZE];
   
    // Create a UDP socket
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Error creating socket");
        exit(1);
    }
   
    // Set up the server address
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);
   
    // Bind the socket to the server address
    if (bind(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Error binding socket");
        close(sockfd);
        exit(1);
    }
   
    printf("Server listening on port %d...\n", PORT);
   
    while (1) {
        socklen_t client_len = sizeof(client_addr);
       
        // Receive the multimedia message from the client
        int bytes_received = recvfrom(sockfd, buffer, BUFFER_SIZE, 0,
                                     (struct sockaddr*)&client_addr, &client_len);
        if (bytes_received < 0) {
            perror("Error receiving data");
            close(sockfd);
            exit(1);
        }
       
        // Process the multimedia message
        printf("Received message from client: %s\n", buffer);
       
        // Send a response back to the client
        char response[] = "Message received!";
        sendto(sockfd, response, strlen(response), 0,
               (struct sockaddr*)&client_addr, client_len);
    }
   
    close(sockfd);
    return 0;
}


//Sender
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define SERVER_IP "127.0.0.1"  // Replace with the IP address of the server
#define PORT 8888
#define BUFFER_SIZE 1024

int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    char buffer[BUFFER_SIZE];
   
    // Create a UDP socket
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Error creating socket");
        exit(1);
    }
   
    // Set up the server address
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = inet_addr(SERVER_IP);
    server_addr.sin_port = htons(PORT);
   
    while (1) {
        printf("Enter message to send (or 'exit' to quit): ");
        fgets(buffer, BUFFER_SIZE, stdin);
       
        // Remove the trailing newline character from the input
        buffer[strcspn(buffer, "\n")] = '\0';
       
        if (strcmp(buffer, "exit") == 0) {
            printf("Exiting...\n");
            break;
        }
       
        // Send the message to the server
        sendto(sockfd, buffer, strlen(buffer), 0,
               (struct sockaddr*)&server_addr, sizeof(server_addr));
       
        // Receive a response from the server
        int bytes_received = recvfrom(sockfd, buffer, BUFFER_SIZE, 0, NULL, NULL);
        if (bytes_received < 0) {
            perror("Error receiving data");
            close(sockfd);
            exit(1);
        }
       
        // Null-terminate the received data to print it as a string
        buffer[bytes_received] = '\0';
        printf("Response from server: %s\n", buffer);
    }
   
    close(sockfd);
    return 0;
}
